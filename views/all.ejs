<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PZNotebook</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
</head>

<body>
    <div class="container mt-4">
        <h1>PZNotebook</h1>
        <!-- Bouton pour ouvrir la modale d'ajout de catégorie -->
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#categoryModal">
            Ajouter une catégorie
        </button>

        <a href="/" class="btn btn-primary">Tous les mods</a>

        <div class="container mt-4" id="categoriesContainer">
            <!-- Les catégories seront ajoutées ici dynamiquement -->
        </div>

        <!-- Modale pour ajouter une catégorie -->
        <div class="modal fade" id="categoryModal" tabindex="-1" aria-labelledby="categoryModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="categoryModalLabel">Nouvelle Catégorie</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="categoryForm">
                            <div class="mb-3">
                                <label for="categoryName" class="form-label">Nom de la catégorie</label>
                                <input type="text" class="form-control" id="categoryName" required>
                            </div>
                            <div class="mb-3">
                                <label for="categoryDescription" class="form-label">Description de la catégorie</label>
                                <textarea class="form-control" id="categoryDescription" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="categoryItems" class="form-label">Objets de la catégorie</label>
                                <input type="text" class="form-control" id="categoryItems"
                                    placeholder="Entrez les objets séparés par des virgules">
                                <small class="form-text text-muted">Séparez les objets par des virgules. Exemple:
                                    seringue,
                                    sérum</small>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                        <button type="submit" class="btn btn-primary" form="categoryForm">Sauvegarder</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modale de modification -->
        <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="editModalLabel">Modifier la Catégorie</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form id="editCategoryForm">
                            <input type="hidden" id="editCategoryId">
                            <div class="mb-3">
                                <label for="editCategoryDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="editCategoryDescription" required></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="editCategoryItems" class="form-label">Objets</label>
                                <input type="text" class="form-control" id="editCategoryItems" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                        <button type="submit" class="btn btn-primary" form="editCategoryForm">Enregistrer les
                            modifications</button>
                    </div>
                </div>
            </div>
        </div>



        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
            crossorigin="anonymous"></script>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
            integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
            crossorigin="anonymous" referrerpolicy="no-referrer" />

        <script>
            function openEditModal(category) {
                document.getElementById('editCategoryId').value = category.id;
                document.getElementById('editCategoryDescription').value = category.description;
                document.getElementById('editCategoryItems').value = category.objets;

                const editModal = new bootstrap.Modal(document.getElementById('editModal'));
                editModal.show();
            }

            function deleteCategory(categoryId) {
                if (!confirm("Êtes-vous sûr de vouloir supprimer cette catégorie ?")) {
                    return; // Ajouter une confirmation avant la suppression
                }

                fetch(`/delete-category/${categoryId}`, {
                    method: 'DELETE'
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        // Retirer la carte de la catégorie supprimée du DOM ou recharger la page
                        window.location.reload();
                    })
                    .catch(error => console.error('Erreur:', error));
            }

            function showNotification(message) {
                const notification = document.createElement('div');
                notification.textContent = message;
                notification.style.backgroundColor = 'green';
                notification.style.color = 'white';
                notification.style.padding = '10px';
                notification.style.position = 'fixed';
                notification.style.bottom = '20px';
                notification.style.right = '20px';
                notification.style.zIndex = '1000';

                document.body.appendChild(notification);

                // Faire disparaître la notification après 3 secondes
                setTimeout(() => {
                    notification.remove();
                }, 3000);
            }



            window.onload = function () {
                fetch('/categories')
                    .then(response => response.json())
                    .then(data => {
                        const categoriesContainer = document.getElementById('categoriesContainer');
                        data.categories.forEach(category => {
                            const categoryElement = document.createElement('div');
                            categoryElement.classList.add('card', 'mb-3');

                            // Création de la liste des objets
                            let objetsList = '';
                            if (category.objets) {
                                const objetsArray = category.objets.split(',');
                                objetsList = '<ul class="list-group list-group-flush collapse" id="collapseObjets' + category.id + '">' +
                                    objetsArray.map(objet => `<li class="list-group-item clickable">${objet.trim()}</li>`).join('') +
                                    '</ul>';
                            }

                            // Bouton de modification
                            const editIcon = document.createElement('a');
                            editIcon.href = '#';
                            editIcon.innerHTML = '<i class="fas fa-edit"></i>'; // Utilisez une icône de votre choix
                            editIcon.classList.add('edit-icon', 'btn', 'btn-primary', 'ms-2');
                            editIcon.style.cursor = 'pointer';
                            editIcon.onclick = function () { openEditModal(category); };

                            // Bouton de suppression
                            const deleteButton = document.createElement('button');
                            deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>'; // Utilisez une icône de votre choix
                            deleteButton.classList.add('btn', 'btn-danger', 'ms-2');
                            deleteButton.onclick = function () { deleteCategory(category.id); };

                            const buttonGroup = document.createElement('div');
                            buttonGroup.classList.add('d-flex', 'justify-content-end');
                            buttonGroup.appendChild(editIcon);
                            buttonGroup.appendChild(deleteButton);

                            // Construction de la carte
                            categoryElement.innerHTML = `
                <div class="card-body position-relative" data-bs-toggle="collapse" data-bs-target="#collapseObjets${category.id}" aria-expanded="false" aria-controls="collapseObjets${category.id}">
                    <h5 class="card-title">${category.nom}</h5>
                    <p class="card-text">${category.description}</p>
                </div>
                ${objetsList}
            `;

                            categoryElement.querySelector('.card-body').appendChild(buttonGroup);
                            categoriesContainer.appendChild(categoryElement);
                        });
                    })
                    .catch(error => console.error('Erreur:', error));
            };

            document.getElementById('editCategoryForm').addEventListener('submit', function (event) {
                event.preventDefault();

                const id = document.getElementById('editCategoryId').value;
                const description = document.getElementById('editCategoryDescription').value;
                const objets = document.getElementById('editCategoryItems').value;

                fetch('/update-category', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id, description, objets }),
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        // recharger la page
                        window.location.reload();
                    })
                    .catch((error) => {
                        console.error('Erreur:', error);
                    });
            });

            document.getElementById('categoryForm').addEventListener('submit', function (event) {
                event.preventDefault();

                const nomCategorie = document.getElementById('categoryName').value;
                const description = document.getElementById('categoryDescription').value;
                const objets = document.getElementById('categoryItems').value;

                // Ici, vous devez envoyer les données au serveur via une requête AJAX ou Fetch API
                fetch('/add-category', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ nomCategorie, description, objets }),
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log(data);
                        // Vous pouvez ajouter ici une logique pour fermer la modale et actualiser la page ou la liste des catégories
                        window.location.reload();
                    })
                    .catch((error) => {
                        console.error('Erreur:', error);
                    });
            });

            categoriesContainer.addEventListener('click', function (event) {
                if (event.target.classList.contains('clickable')) {
                    const text = event.target.textContent;
                    navigator.clipboard.writeText(text).then(() => {
                        // Afficher la notification
                        showNotification("Copié dans le presse-papiers : " + text);
                    }).catch(err => {
                        console.error('Erreur lors de la copie :', err);
                    });
                }
            });

        </script>

</body>

</html>